// USING N^2 SPACE
// string Solution::longestPalindrome(string a) {
//     int n = a.size();
//     vector<vector<int>> v(n, vector<int> (n, 0));
//     int mxm = 1;
//     for(int i=0;i<n;i++)
//     {
//         v[i][i] = 1;
//     }
//     int start = 0;
//     for(int length = 2;length <= n;length++)
//     {
//         for(int i=0;i<n-length+1;i++)
//         {
//             int j = i+length - 1;
//             if(a[i] == a[j] && length == 2)
//             {
//                 v[i][j] = 1;
//                 start = i;
//                 mxm = 2;
//             }
//             else if(v[i+1][j-1] > 0 && a[i] == a[j])
//             {
//                 v[i][j] = 1;
//                 if(length > mxm)
//                 {
//                     start = i;
//                     mxm = length;
//                 }
//             }
//         }
//     }
//     string ans = "";
//     ans = a.substr(start, mxm);
//     return ans;
// }




// USING CONSTANT SPACE 
string Solution::longestPalindrome(string a) {
    int n = a.size();
    int mxm = 1;
    int start = 0;
    int low, high;
    for(int i=1;i<n;i++)
    {
        low = i-1;
        high = i;
        while(low >= 0 && high < n && a[low] == a[high])
        {
            if(mxm < high - low + 1)
            {
                mxm = high - low + 1;
                start = low;
            }
            low--;
            high++;
        }
        
        low = i-1;
        high = i+1;
        while(low >= 0 && high < n && a[low] == a[high])
        {
            if(mxm < high - low + 1)
            {
                mxm = high - low + 1;
                start = low;
            }
            low--;
            high++;
        }
        
        
    }
    string ans = "";
    ans = a.substr(start, mxm);
    return ans;
}
